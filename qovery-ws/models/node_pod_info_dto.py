# coding: utf-8

"""
    websocket-gateway

    Describe the weboscket endpoints

    The version of the OpenAPI document: 0.1.0
    Contact: erebe@erebe.eu
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr, conint

class NodePodInfoDto(BaseModel):
    """
    NodePodInfoDto
    """
    cpu_milli_limit: Optional[conint(strict=True, ge=0)] = None
    cpu_milli_request: Optional[conint(strict=True, ge=0)] = None
    environment_id: Optional[StrictStr] = None
    images_version: Dict[str, StrictStr] = Field(...)
    memory_mib_limit: Optional[conint(strict=True, ge=0)] = None
    memory_mib_request: Optional[conint(strict=True, ge=0)] = None
    name: StrictStr = Field(...)
    namespace: StrictStr = Field(...)
    project_id: Optional[StrictStr] = None
    service_id: Optional[StrictStr] = None
    additional_properties: Dict[str, Any] = {}
    __properties = ["cpu_milli_limit", "cpu_milli_request", "environment_id", "images_version", "memory_mib_limit", "memory_mib_request", "name", "namespace", "project_id", "service_id"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> NodePodInfoDto:
        """Create an instance of NodePodInfoDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if cpu_milli_limit (nullable) is None
        # and __fields_set__ contains the field
        if self.cpu_milli_limit is None and "cpu_milli_limit" in self.__fields_set__:
            _dict['cpu_milli_limit'] = None

        # set to None if cpu_milli_request (nullable) is None
        # and __fields_set__ contains the field
        if self.cpu_milli_request is None and "cpu_milli_request" in self.__fields_set__:
            _dict['cpu_milli_request'] = None

        # set to None if environment_id (nullable) is None
        # and __fields_set__ contains the field
        if self.environment_id is None and "environment_id" in self.__fields_set__:
            _dict['environment_id'] = None

        # set to None if memory_mib_limit (nullable) is None
        # and __fields_set__ contains the field
        if self.memory_mib_limit is None and "memory_mib_limit" in self.__fields_set__:
            _dict['memory_mib_limit'] = None

        # set to None if memory_mib_request (nullable) is None
        # and __fields_set__ contains the field
        if self.memory_mib_request is None and "memory_mib_request" in self.__fields_set__:
            _dict['memory_mib_request'] = None

        # set to None if project_id (nullable) is None
        # and __fields_set__ contains the field
        if self.project_id is None and "project_id" in self.__fields_set__:
            _dict['project_id'] = None

        # set to None if service_id (nullable) is None
        # and __fields_set__ contains the field
        if self.service_id is None and "service_id" in self.__fields_set__:
            _dict['service_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> NodePodInfoDto:
        """Create an instance of NodePodInfoDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return NodePodInfoDto.parse_obj(obj)

        _obj = NodePodInfoDto.parse_obj({
            "cpu_milli_limit": obj.get("cpu_milli_limit"),
            "cpu_milli_request": obj.get("cpu_milli_request"),
            "environment_id": obj.get("environment_id"),
            "images_version": obj.get("images_version"),
            "memory_mib_limit": obj.get("memory_mib_limit"),
            "memory_mib_request": obj.get("memory_mib_request"),
            "name": obj.get("name"),
            "namespace": obj.get("namespace"),
            "project_id": obj.get("project_id"),
            "service_id": obj.get("service_id")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


