# coding: utf-8

"""
    websocket-gateway

    Describe the weboscket endpoints

    The version of the OpenAPI document: 0.1.0
    Contact: erebe@erebe.eu
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from qovery-ws.models.service_state_dto import ServiceStateDto

class ContainerStateDto(BaseModel):
    """
    ContainerStateDto
    """
    started_at: Optional[StrictInt] = Field(None, description="Unix timestamp with millisecond precision")
    state: ServiceStateDto = Field(...)
    state_message: Optional[StrictStr] = None
    state_reason: Optional[StrictStr] = None
    additional_properties: Dict[str, Any] = {}
    __properties = ["started_at", "state", "state_message", "state_reason"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ContainerStateDto:
        """Create an instance of ContainerStateDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if started_at (nullable) is None
        # and __fields_set__ contains the field
        if self.started_at is None and "started_at" in self.__fields_set__:
            _dict['started_at'] = None

        # set to None if state_message (nullable) is None
        # and __fields_set__ contains the field
        if self.state_message is None and "state_message" in self.__fields_set__:
            _dict['state_message'] = None

        # set to None if state_reason (nullable) is None
        # and __fields_set__ contains the field
        if self.state_reason is None and "state_reason" in self.__fields_set__:
            _dict['state_reason'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ContainerStateDto:
        """Create an instance of ContainerStateDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ContainerStateDto.parse_obj(obj)

        _obj = ContainerStateDto.parse_obj({
            "started_at": obj.get("started_at"),
            "state": obj.get("state"),
            "state_message": obj.get("state_message"),
            "state_reason": obj.get("state_reason")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


