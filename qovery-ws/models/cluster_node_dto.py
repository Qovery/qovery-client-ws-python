# coding: utf-8

"""
    websocket-gateway

    Describe the weboscket endpoints

    The version of the OpenAPI document: 0.1.0
    Contact: erebe@erebe.eu
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from qovery-ws.models.node_address_dto import NodeAddressDto
from qovery-ws.models.node_condition_dto import NodeConditionDto
from qovery-ws.models.node_pod_info_dto import NodePodInfoDto
from qovery-ws.models.node_resource_dto import NodeResourceDto
from qovery-ws.models.node_taint_dto import NodeTaintDto

class ClusterNodeDto(BaseModel):
    """
    ClusterNodeDto
    """
    addresses: conlist(NodeAddressDto) = Field(...)
    annotations: Dict[str, StrictStr] = Field(...)
    architecture: StrictStr = Field(...)
    conditions: conlist(NodeConditionDto) = Field(...)
    kernel_version: StrictStr = Field(...)
    kubelet_version: StrictStr = Field(...)
    labels: Dict[str, StrictStr] = Field(...)
    name: StrictStr = Field(...)
    operating_system: StrictStr = Field(...)
    os_image: StrictStr = Field(...)
    pods: conlist(NodePodInfoDto) = Field(...)
    resources_allocatable: NodeResourceDto = Field(...)
    taints: conlist(NodeTaintDto) = Field(...)
    unschedulable: StrictBool = Field(...)
    additional_properties: Dict[str, Any] = {}
    __properties = ["addresses", "annotations", "architecture", "conditions", "kernel_version", "kubelet_version", "labels", "name", "operating_system", "os_image", "pods", "resources_allocatable", "taints", "unschedulable"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ClusterNodeDto:
        """Create an instance of ClusterNodeDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in addresses (list)
        _items = []
        if self.addresses:
            for _item in self.addresses:
                if _item:
                    _items.append(_item.to_dict())
            _dict['addresses'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in conditions (list)
        _items = []
        if self.conditions:
            for _item in self.conditions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['conditions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in pods (list)
        _items = []
        if self.pods:
            for _item in self.pods:
                if _item:
                    _items.append(_item.to_dict())
            _dict['pods'] = _items
        # override the default output from pydantic by calling `to_dict()` of resources_allocatable
        if self.resources_allocatable:
            _dict['resources_allocatable'] = self.resources_allocatable.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in taints (list)
        _items = []
        if self.taints:
            for _item in self.taints:
                if _item:
                    _items.append(_item.to_dict())
            _dict['taints'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ClusterNodeDto:
        """Create an instance of ClusterNodeDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ClusterNodeDto.parse_obj(obj)

        _obj = ClusterNodeDto.parse_obj({
            "addresses": [NodeAddressDto.from_dict(_item) for _item in obj.get("addresses")] if obj.get("addresses") is not None else None,
            "annotations": obj.get("annotations"),
            "architecture": obj.get("architecture"),
            "conditions": [NodeConditionDto.from_dict(_item) for _item in obj.get("conditions")] if obj.get("conditions") is not None else None,
            "kernel_version": obj.get("kernel_version"),
            "kubelet_version": obj.get("kubelet_version"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "operating_system": obj.get("operating_system"),
            "os_image": obj.get("os_image"),
            "pods": [NodePodInfoDto.from_dict(_item) for _item in obj.get("pods")] if obj.get("pods") is not None else None,
            "resources_allocatable": NodeResourceDto.from_dict(obj.get("resources_allocatable")) if obj.get("resources_allocatable") is not None else None,
            "taints": [NodeTaintDto.from_dict(_item) for _item in obj.get("taints")] if obj.get("taints") is not None else None,
            "unschedulable": obj.get("unschedulable")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


