# coding: utf-8

"""
    websocket-gateway

    Describe the weboscket endpoints

    The version of the OpenAPI document: 0.1.0
    Contact: erebe@erebe.eu
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conint, conlist
from qovery-ws.models.service_state_dto import ServiceStateDto

class CertificateStatusDto(BaseModel):
    """
    CertificateStatusDto
    """
    dns_names: conlist(StrictStr) = Field(...)
    failed_issuance_attempt_count: conint(strict=True, ge=0) = Field(...)
    last_failure_issuance_time: Optional[StrictInt] = Field(None, description="Unix timestamp with millisecond precision")
    not_after: Optional[StrictInt] = Field(None, description="Unix timestamp with millisecond precision")
    not_before: Optional[StrictInt] = Field(None, description="Unix timestamp with millisecond precision")
    renewal_time: Optional[StrictInt] = Field(None, description="Unix timestamp with millisecond precision")
    state: ServiceStateDto = Field(...)
    state_message: Optional[StrictStr] = None
    additional_properties: Dict[str, Any] = {}
    __properties = ["dns_names", "failed_issuance_attempt_count", "last_failure_issuance_time", "not_after", "not_before", "renewal_time", "state", "state_message"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CertificateStatusDto:
        """Create an instance of CertificateStatusDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if last_failure_issuance_time (nullable) is None
        # and __fields_set__ contains the field
        if self.last_failure_issuance_time is None and "last_failure_issuance_time" in self.__fields_set__:
            _dict['last_failure_issuance_time'] = None

        # set to None if not_after (nullable) is None
        # and __fields_set__ contains the field
        if self.not_after is None and "not_after" in self.__fields_set__:
            _dict['not_after'] = None

        # set to None if not_before (nullable) is None
        # and __fields_set__ contains the field
        if self.not_before is None and "not_before" in self.__fields_set__:
            _dict['not_before'] = None

        # set to None if renewal_time (nullable) is None
        # and __fields_set__ contains the field
        if self.renewal_time is None and "renewal_time" in self.__fields_set__:
            _dict['renewal_time'] = None

        # set to None if state_message (nullable) is None
        # and __fields_set__ contains the field
        if self.state_message is None and "state_message" in self.__fields_set__:
            _dict['state_message'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CertificateStatusDto:
        """Create an instance of CertificateStatusDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CertificateStatusDto.parse_obj(obj)

        _obj = CertificateStatusDto.parse_obj({
            "dns_names": obj.get("dns_names"),
            "failed_issuance_attempt_count": obj.get("failed_issuance_attempt_count"),
            "last_failure_issuance_time": obj.get("last_failure_issuance_time"),
            "not_after": obj.get("not_after"),
            "not_before": obj.get("not_before"),
            "renewal_time": obj.get("renewal_time"),
            "state": obj.get("state"),
            "state_message": obj.get("state_message")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


