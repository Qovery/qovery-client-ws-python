# coding: utf-8

"""
    websocket-gateway

    Describe the weboscket endpoints

    The version of the OpenAPI document: 0.1.0
    Contact: erebe@erebe.eu
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr, conint
from qovery-ws.models.container_state_dto import ContainerStateDto
from qovery-ws.models.container_state_terminated_dto import ContainerStateTerminatedDto

class ContainerStatusDto(BaseModel):
    """
    ContainerStatusDto
    """
    current_state: Optional[ContainerStateDto] = None
    image: StrictStr = Field(...)
    last_terminated_state: Optional[ContainerStateTerminatedDto] = None
    name: StrictStr = Field(...)
    restart_count: conint(strict=True, ge=0) = Field(...)
    additional_properties: Dict[str, Any] = {}
    __properties = ["current_state", "image", "last_terminated_state", "name", "restart_count"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ContainerStatusDto:
        """Create an instance of ContainerStatusDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of current_state
        if self.current_state:
            _dict['current_state'] = self.current_state.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_terminated_state
        if self.last_terminated_state:
            _dict['last_terminated_state'] = self.last_terminated_state.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if current_state (nullable) is None
        # and __fields_set__ contains the field
        if self.current_state is None and "current_state" in self.__fields_set__:
            _dict['current_state'] = None

        # set to None if last_terminated_state (nullable) is None
        # and __fields_set__ contains the field
        if self.last_terminated_state is None and "last_terminated_state" in self.__fields_set__:
            _dict['last_terminated_state'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ContainerStatusDto:
        """Create an instance of ContainerStatusDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ContainerStatusDto.parse_obj(obj)

        _obj = ContainerStatusDto.parse_obj({
            "current_state": ContainerStateDto.from_dict(obj.get("current_state")) if obj.get("current_state") is not None else None,
            "image": obj.get("image"),
            "last_terminated_state": ContainerStateTerminatedDto.from_dict(obj.get("last_terminated_state")) if obj.get("last_terminated_state") is not None else None,
            "name": obj.get("name"),
            "restart_count": obj.get("restart_count")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


