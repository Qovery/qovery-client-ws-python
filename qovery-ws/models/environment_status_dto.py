# coding: utf-8

"""
    websocket-gateway

    Describe the weboscket endpoints

    The version of the OpenAPI document: 0.1.0
    Contact: erebe@erebe.eu
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List
from pydantic import BaseModel, StrictStr
from qovery-ws.models.application_status_dto import ApplicationStatusDto
from qovery-ws.models.database_status_dto import DatabaseStatusDto
from qovery-ws.models.service_state_dto import ServiceStateDto
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class EnvironmentStatusDto(BaseModel):
    """
    EnvironmentStatusDto
    """ # noqa: E501
    applications: List[ApplicationStatusDto]
    containers: List[ApplicationStatusDto]
    databases: List[DatabaseStatusDto]
    helms: List[ApplicationStatusDto]
    id: StrictStr
    jobs: List[ApplicationStatusDto]
    project_id: StrictStr
    state: ServiceStateDto
    __properties: ClassVar[List[str]] = ["applications", "containers", "databases", "helms", "id", "jobs", "project_id", "state"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of EnvironmentStatusDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in applications (list)
        _items = []
        if self.applications:
            for _item in self.applications:
                if _item:
                    _items.append(_item.to_dict())
            _dict['applications'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in containers (list)
        _items = []
        if self.containers:
            for _item in self.containers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['containers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in databases (list)
        _items = []
        if self.databases:
            for _item in self.databases:
                if _item:
                    _items.append(_item.to_dict())
            _dict['databases'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in helms (list)
        _items = []
        if self.helms:
            for _item in self.helms:
                if _item:
                    _items.append(_item.to_dict())
            _dict['helms'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in jobs (list)
        _items = []
        if self.jobs:
            for _item in self.jobs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['jobs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of EnvironmentStatusDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applications": [ApplicationStatusDto.from_dict(_item) for _item in obj.get("applications")] if obj.get("applications") is not None else None,
            "containers": [ApplicationStatusDto.from_dict(_item) for _item in obj.get("containers")] if obj.get("containers") is not None else None,
            "databases": [DatabaseStatusDto.from_dict(_item) for _item in obj.get("databases")] if obj.get("databases") is not None else None,
            "helms": [ApplicationStatusDto.from_dict(_item) for _item in obj.get("helms")] if obj.get("helms") is not None else None,
            "id": obj.get("id"),
            "jobs": [ApplicationStatusDto.from_dict(_item) for _item in obj.get("jobs")] if obj.get("jobs") is not None else None,
            "project_id": obj.get("project_id"),
            "state": obj.get("state")
        })
        return _obj


